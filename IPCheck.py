import aiohttp
import asyncio
import json
import logging
import os
import sys
import signal
from aiohttp import ClientSession, ClientTimeout
from asyncio import Semaphore
from colorama import Fore, Style, init

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ Windows
init(autoreset=True)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
API_URL = "https://ipinfo.io/{}/json"  # URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ IP-–∞–¥—Ä–µ—Å–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–∞
OUTPUT_FILE = "output.txt"  # –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
INPUT_FILE = "ssh_checked.txt"  # –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É, —Å–æ–¥–µ—Ä–∂–∞—â–µ–º—É IP-–∞–¥—Ä–µ—Å–∞ –∏ –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
TIMEOUT = 0.7 # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –≤ —Å–µ–∫—É–Ω–¥–∞—Ö. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫ –¥–æ–ª–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç API

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
MAX_CONCURRENT_REQUESTS = 2  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤

# –§–ª–∞–≥–∏ —Å—Ç—Ä–∞–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ Unicode
FLAGS = {
    'AF': 'üá¶üá´', 'AL': 'üá¶üá±', 'DZ': 'üá©üáø', 'AS': 'üá¶üá∏', 'AD': 'üá¶üá©', 'AO': 'üá¶üá¥', 'AI': 'üá¶üáÆ',
    'AQ': 'üá¶üá∂', 'AG': 'üá¶üá¨', 'AR': 'üá¶üá∑', 'AM': 'üá¶üá≤', 'AW': 'üá¶üáº', 'AU': 'üá¶üá∫', 'AT': 'üá¶üáπ',
    'AZ': 'üá¶üáø', 'BS': 'üáßüá∏', 'BH': 'üáßüá≠', 'BD': 'üáßüá©', 'BB': 'üáßüáß', 'BY': 'üáßüáæ', 'BE': 'üáßüá™',
    'BZ': 'üáßüáø', 'BJ': 'üáßüáØ', 'BT': 'üáßüáπ', 'BO': 'üáßüá¥', 'BA': 'üáßüá¶', 'BW': 'üáßüáº', 'BV': 'üáßüáª',
    'BR': 'üáßüá∑', 'IO': 'üáÆüá¥', 'BN': 'üáßüá≥', 'BG': 'üáßüá¨', 'BF': 'üáßüá´', 'BI': 'üáßüáÆ', 'KH': 'üá∞üá≠',
    'CM': 'üá®üá≤', 'CA': 'üá®üá¶', 'CV': 'üá®üáª', 'KY': 'üá∞üáæ', 'CF': 'üá®üá´', 'TD': 'üáπüá©', 'CL': 'üá®üá±',
    'CN': 'üá®üá≥', 'CX': 'üá®üáΩ', 'CC': 'üá®üá®', 'CO': 'üá®üá¥', 'KM': 'üá∞üá≤', 'CG': 'üá®üá¨', 'CD': 'üá®üá©',
    'CK': 'üá®üá∞', 'CR': 'üá®üá∑', 'CI': 'üá®üáÆ', 'HR': 'üá≠üá∑', 'CU': 'üá®üá∫', 'CW': 'üá®üáº', 'CY': 'üá®üáæ',
    'CZ': 'üá®üáø', 'DK': 'üá©üá∞', 'DJ': 'üá©üáØ', 'DM': 'üá©üá≤', 'DO': 'üá©üá¥', 'EC': 'üá™üá®', 'EG': 'üá™üá¨',
    'SV': 'üá∏üáª', 'GQ': 'üá¨üá∂', 'ER': 'üá™üá∑', 'EE': 'üá™üá™', 'ET': 'üá™üáπ', 'FK': 'üá´üá∞', 'FO': 'üá´üá¥',
    'FJ': 'üá´üáØ', 'FI': 'üá´üáÆ', 'FR': 'üá´üá∑', 'GF': 'üá¨üá¶', 'PF': 'üáµüá´', 'TF': 'üáπüá´', 'GA': 'üá¨üá¶',
    'GM': 'üá≤üá±', 'GE': 'üá¨üá™', 'DE': 'üá©üá™', 'GH': 'üá¨üá≠', 'GI': 'üá¨üáÆ', 'GR': 'üá¨üá∑', 'GL': 'üá¨üá±',
    'GD': 'üá¨üá©', 'GP': 'üá¨üáµ', 'GU': 'üá¨üá∫', 'GT': 'üáµüá™', 'GG': 'üá¨üá¨', 'GN': 'üá¨üá≥', 'GW': 'üá¨üáº',
    'GY': 'üá¨üáæ', 'HT': 'üá≠üáπ', 'HM': 'üá≠üá≤', 'VA': 'üáªüá¶', 'HN': 'üá≠üá≥', 'HK': 'üá≠üá∞', 'HU': 'üá≠üá∫',
    'IS': 'üáÆüá∏', 'IN': 'üáÆüá≥', 'ID': 'üáÆüá©', 'IR': 'üáÆüá∑', 'IQ': 'üáÆüá∂', 'IE': 'üáÆüá™', 'IM': 'üáÆüá≤',
    'IL': 'üáÆüá±', 'IT': 'üáÆüáπ', 'JE': 'üáØüá™', 'JO': 'üáØüá¥', 'JP': 'üáØüáµ', 'KZ': 'üá∞üáø', 'KE': 'üá∞üá™',
    'KI': 'üá∞üáÆ', 'KP': 'üá∞üáµ', 'KR': 'üá∞üá∑', 'KW': 'üá∞üáº', 'KG': 'üá∞üá¨', 'LA': 'üá±üá¶', 'LV': 'üá±üáª',
    'LB': 'üá±üáß', 'LS': 'üá±üá∏', 'LR': 'üá±üá∑', 'LY': 'üá±üáæ', 'LI': 'üá±üáÆ', 'LT': 'üá±üáπ', 'LU': 'üá±üá∫',
    'MO': 'üá≤üá¥', 'MK': 'üá≤üá∞', 'MG': 'üá≤üá¨', 'MW': 'üá≤üáº', 'MY': 'üá≤üáæ', 'MV': 'üá≤üáª', 'ML': 'üá≤üá±',
    'MT': 'üá≤üáπ', 'MH': 'üá≤üá≠', 'MQ': 'üá≤üá∂', 'MR': 'üá≤üá∑', 'MU': 'üá≤üá∫', 'YT': 'üá≤üáæ', 'MX': 'üá≤üáΩ',
    'FM': 'üá´üá≤', 'MD': 'üá≤üá©', 'MC': 'üá≤üá®', 'MN': 'üá≤üá≥', 'ME': 'üá≤üá™', 'MS': 'üá≤üá∏', 'MA': 'üá≤üá¶',
    'MZ': 'üá≤üáø', 'MM': 'üá≤üá≤', 'NA': 'üá≥üá¶', 'NR': 'üá≥üá∑', 'NP': 'üá≥üáµ', 'NL': 'üá≥üá±', 'NC': 'üá≥üá®',
    'NZ': 'üá≥üáø', 'NI': 'üá≥üáÆ', 'NE': 'üá≥üá™', 'NG': 'üá≥üá¨', 'NU': 'üá≥üá∫', 'NF': 'üá≥üá´', 'MP': 'üá≤üáµ',
    'NO': 'üá≥üá¥', 'OM': 'üá¥üá≤', 'PK': 'üáµüá∞', 'PW': 'üáµüáº', 'PS': 'üáµüá∏', 'PA': 'üáµüá¶', 'PG': 'üáµüá¨',
    'PY': 'üáµüáæ', 'PE': 'üáµüá™', 'PH': 'üáµüá≠', 'PN': 'üáµüá≥', 'PL': 'üáµüá±', 'PT': 'üáµüáπ', 'PR': 'üáµüá∑',
    'QA': 'üá∂üá¶', 'RE': 'üá∑üá™', 'RO': 'üá∑üá¥', 'RU': 'üá∑üá∫', 'RW': 'üá∑üáº', 'SH': 'üá∏üá≠', 'KN': 'üá∞üá≥',
    'LC': 'üá±üá®', 'PM': 'üáµüá≤', 'VC': 'üáªüá®', 'WS': 'üáºüá∏', 'SM': 'üá∏üá≤', 'ST': 'üá≤üá±', 'SA': 'üá∏üá¶',
    'SN': 'üá∏üá≥', 'RS': 'üá∑üá∏', 'SC': 'üá∏üá®', 'SL': 'üá∏üá±', 'SG': 'üá∏üá¨', 'SX': 'üá∏üáΩ', 'SK': 'üá∏üá∞',
    'SI': 'üá∏üáÆ', 'SB': 'üá∏üáß', 'SO': 'üá∏üá¥', 'ZA': 'üáøüá¶', 'SS': 'üá∏üá∏', 'ES': 'üá™üá∏', 'LK': 'üá±üá∞', 
    'SD': 'üá∏üá©', 'SR': 'üá∏üá∑', 'SZ': 'üá∏üáø', 'SE': 'üá∏üá™', 'SG': 'üá∏üá¨',
'SH': 'üá∏üá≠', 'SI': 'üá∏üáÆ', 'SJ': 'üáØüá≤', 'SK': 'üá∏üá∞', 'SL': 'üá∏üá±', 'SM': 'üá∏üá≤', 'SN': 'üá∏üá≥',
'SO': 'üá∏üá¥', 'SR': 'üá∏üá∑', 'SS': 'üá∏üá∏', 'ST': 'üá≤üá±', 'SV': 'üá∏üáª', 'SX': 'üá∏üáΩ', 'SY': 'üá∏üáæ',
'SZ': 'üá∏üáø', 'TC': 'üáπüá®', 'TD': 'üáπüá©', 'TF': 'üáπüá´', 'TG': 'üáπüá¨', 'TH': 'üáπüá≠', 'TJ': 'üáπüáØ',
'TK': 'üáπüá∞', 'TL': 'üáπüá±', 'TM': 'üáπüá≤', 'TN': 'üáπüá≥', 'TO': 'üáπüá¥', 'TR': 'üáπüá∑', 'TT': 'üáπüáπ',
'TV': 'üáπüáª', 'TZ': 'üáπüáø', 'UA': 'üá∫üá¶', 'UG': 'üá∫üá¨', 'UM': 'üá∫üá≤', 'US': 'üá∫üá∏', 'UY': 'üá∫üáæ',
'UZ': 'üá∫üáø', 'VA': 'üáªüá¶', 'VC': 'üáªüá®', 'VE': 'üáªüá™', 'VN': 'üáªüá≥', 'VU': 'üáªüá∫', 'WF': 'üáºüá´',
'WS': 'üáºüá∏', 'YE': 'üáæüá™', 'YT': 'üá≤üáæ', 'ZA': 'üáøüá¶', 'ZM': 'üáøüá≤', 'ZW': 'üáøüáº'
}


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    DATE_TIME = Fore.CYAN
    IP_LINE = Fore.YELLOW
    RESULT = Fore.GREEN
    WARNING = Fore.MAGENTA
    ERROR = Fore.RED
    RESET = Style.RESET_ALL

# –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
file_lock = asyncio.Lock()
# –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
semaphore = Semaphore(MAX_CONCURRENT_REQUESTS)

async def fetch_ip_info(session: ClientSession, ip: str) -> dict:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ IP-–∞–¥—Ä–µ—Å–µ –∏–∑ API ipinfo.io.

    :param session: –û–±—ä–µ–∫—Ç aiohttp.ClientSession –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤.
    :param ip: IP-–∞–¥—Ä–µ—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    :return: JSON –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ IP –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        async with semaphore:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            async with session.get(API_URL.format(ip), timeout=ClientTimeout(total=TIMEOUT)) as response:
                status = response.status
                if status == 429:
                    logging.error(f"{Colors.ERROR}Rate limit exceeded for IP {ip}.{Colors.RESET}")
                    return None
                elif status != 200:
                    logging.error(f"{Colors.ERROR}Unexpected HTTP status {status} for IP {ip}. Response text: {await response.text()}{Colors.RESET}")
                    return None
                return await response.json()
    except aiohttp.ClientResponseError as e:
        logging.error(f"{Colors.ERROR}HTTP error fetching IP info for {ip}: {e}{Colors.RESET}")
    except aiohttp.ClientConnectorError as e:
        logging.error(f"{Colors.ERROR}Connection error fetching IP info for {ip}: {e}{Colors.RESET}")
    except asyncio.TimeoutError:
        logging.error(f"{Colors.ERROR}Timeout error fetching IP info for {ip}{Colors.RESET}")
    except aiohttp.ClientError as e:
        logging.error(f"{Colors.ERROR}Client error fetching IP info for {ip}: {e}{Colors.RESET}")
    except Exception as e:
        logging.error(f"{Colors.ERROR}Unexpected error fetching IP info for {ip}: {e}{Colors.RESET}")
    return None

def get_country_flag(country_code: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã –ø–æ –∫–æ–¥—É —Å—Ç—Ä–∞–Ω—ã.

    :param country_code: –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'US').
    :return: Unicode —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ —Ñ–ª–∞–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    return FLAGS.get(country_code, '')

async def process_line(session: ClientSession, line: str) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.

    :param session: –û–±—ä–µ–∫—Ç aiohttp.ClientSession –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤.
    :param line: –°—Ç—Ä–æ–∫–∞ –∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è IP:–ø–æ—Ä—Ç;–ª–æ–≥–∏–Ω;–ø–∞—Ä–æ–ª—å.
    :return: –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        parts = line.strip().split(';')
        if len(parts) != 3:
            logging.warning(f"{Colors.WARNING}Invalid line format: {line.strip()}{Colors.RESET}")
            return None

        ip_port, login, password = parts
        ip = ip_port.split(':')[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ IP-–∞–¥—Ä–µ—Å

        ip_info = await fetch_ip_info(session, ip)
        if not ip_info:
            return None

        country_code = ip_info.get('country', '')
        city = ip_info.get('city', '')
        org = ip_info.get('org', '')

        country_flag = get_country_flag(country_code)
        result = f"{Colors.IP_LINE}{line.strip()} | {country_flag} | {country_code} | {city} | {org}{Colors.RESET}"
        print(f"{Colors.RESULT}{result}{Colors.RESET}")  # –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

        # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        async with file_lock:
            with open(OUTPUT_FILE, "a") as file:
                file.write(result + "\n")
                
        return result

    except IndexError:
        logging.error(f"{Colors.WARNING}Index error while processing line '{line.strip()}'{Colors.RESET}")
    except ValueError:
        logging.error(f"{Colors.WARNING}Value error while processing line '{line.strip()}'{Colors.RESET}")
    except Exception as e:
        logging.error(f"{Colors.ERROR}Error processing line '{line.strip()}': {e}{Colors.RESET}")
    return None

async def process_file(input_file: str):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–∏—Ç–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö.

    :param input_file: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É.
    """
    queue = asyncio.Queue()
    async with aiohttp.ClientSession() as session:
        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ –æ—á–µ—Ä–µ–¥—å
        try:
            with open(input_file, 'r') as file:
                for line in file:
                    await queue.put(line)
        except FileNotFoundError:
            logging.error(f"{Colors.ERROR}Input file {input_file} not found.{Colors.RESET}")
            return
        except IOError as e:
            logging.error(f"{Colors.ERROR}Error reading input file {input_file}: {e}{Colors.RESET}")
            return
        except Exception as e:
            logging.error(f"{Colors.ERROR}Unexpected error reading input file {input_file}: {e}{Colors.RESET}")
            return

        async def worker():
            """
            –†–∞–±–æ—Ç–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.
            """
            while True:
                line = await queue.get()
                if line is None:
                    break
                await process_line(session, line)
                queue.task_done()

        # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏
        workers = [asyncio.create_task(worker()) for _ in range(MAX_CONCURRENT_REQUESTS)]

        try:
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á
            await queue.join()
        except asyncio.CancelledError:
            logging.error(f"{Colors.ERROR}Processing was cancelled.{Colors.RESET}")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á–∏—Ö
        for _ in range(MAX_CONCURRENT_REQUESTS):
            await queue.put(None)
        await asyncio.gather(*workers)

def signal_handler(signum, frame):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.

    :param signum: –ù–æ–º–µ—Ä —Å–∏–≥–Ω–∞–ª–∞.
    :param frame: –¢–µ–∫—É—â–∏–π —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤.
    """
    print(f"{Colors.DATE_TIME}Received signal {signum}. Exiting...{Colors.RESET}")
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
    asyncio.get_event_loop().stop()

def main(input_file: str):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞.

    :param input_file: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É.
    """
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(process_file(input_file))
    except KeyboardInterrupt:
        print(f"{Colors.ERROR}Process interrupted by user{Colors.RESET}")
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á
        pending = asyncio.all_tasks(loop)
        for task in pending:
            task.cancel()
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        loop.run_until_complete(asyncio.gather(*pending, return_exceptions=True))
        loop.close()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
    if len(sys.argv) > 1:
        input_file = sys.argv[1]
    else:
        input_file = INPUT_FILE
    main(input_file)